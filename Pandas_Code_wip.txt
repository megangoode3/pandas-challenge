# Dependencies and Setup
import pandas as pd

# File to Load (Remember to Change These)
school_data_to_load = "schools_complete.csv"
student_data_to_load = "students_complete.csv"

# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset.  
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete.head()





# Calculate the total number of unique schools
school_count = len(school_data_complete["School ID"].unique())
school_count

# Calculate the total number of students
student_count = len(school_data_complete["Student ID"].unique())
student_count

# Calculate the total budget
total_budget = school_data["budget"].sum()
total_budget

# Calculate the average (mean) math score
average_math_score = student_data["math_score"].mean()
average_math_score

# Calculate the average (mean) reading score
average_reading_score = student_data["reading_score"].mean()
average_reading_score


# Use the following to calculate the percentage of students who passed math (math scores greather than or equal to 70)
passing_math_count = school_data_complete[(school_data_complete["math_score"] >= 70)].count()["student_name"]
passing_math_percentage = passing_math_count / float(student_count) * 100
passing_math_percentage

# Calculate the percentage of students who passeed reading (hint: look at how the math percentage was calculated)  
passing_reading_count = school_data_complete[(school_data_complete["reading_score"] >= 70)].count()["student_name"]
passing_reading_percentage = passing_reading_count / float(student_count) * 100
passing_reading_percentage

# Use the following to calculate the percentage of students that passed math and reading
passing_math_reading_count = school_data_complete[(school_data_complete["math_score"] >= 70) & (school_data_complete["reading_score"] >= 70)].count()["student_name"]
overall_passing_rate = passing_math_reading_count /  float(student_count) * 100
overall_passing_rate

# Create a high-level snapshot of the district's key metrics in a DataFrame
district_summary = [{"Total Schools": school_count, "Total Students": student_count, "Total Budget": total_budget, "Average Math Score": average_math_score, "Average Reading Score": average_reading_score, 
                     "% Passing Math": passing_math_percentage, "% Passing Reading": passing_reading_percentage, "% Overall Passing": overall_passing_rate}]

district_summary_df = pd.DataFrame(district_summary)
district_summary_df

# Formatting
district_summary_df["Total Students"] = district_summary_df["Total Students"].map("{:,}".format)
district_summary_df["Total Budget"] = district_summary_df["Total Budget"].map("${:,.2f}".format)
district_summary_df["Average Math Score"] = district_summary_df["Average Math Score"].map("{:,.2f}".format)
district_summary_df["Average Reading Score"] = district_summary_df["Average Reading Score"].map("{:,.2f}".format)
district_summary_df["% Passing Math"] = district_summary_df["% Passing Math"].map("{:,.2f}%".format)
district_summary_df["% Passing Reading"] = district_summary_df["% Passing Reading"].map("{:,.2f}%".format)
district_summary_df["% Overall Passing"] = district_summary_df["% Overall Passing"].map("{:,.2f}%".format)



# Display the DataFrame
district_summary_df







# Use the code provided to select the school type
group_school_types_df = school_data_complete.groupby(["school_name"])

school_types = group_school_types_df["type"].first()
school_types

# Calculate the total student count
per_school_counts = group_school_types_df["Student ID"].count()
per_school_counts

# Calculate the total school budget
per_school_budget = group_school_types_df["budget"].first()
per_school_budget

# Calculate the per student budget
per_student_budget = per_school_budget / per_school_counts
per_student_budget

# Calculate the average test scores - math
per_school_math = group_school_types_df["math_score"].mean()
per_school_math.round(2)

# Calculate the number of schools with math scores of 70 or higher
school_passing_math = school_data_complete[(school_data_complete["math_score"] >= 70)].count()["school_name"]
school_passing_math

# Calculate the number of schools with reading scores of 70 or higher
school_passing_reading = school_data_complete[(school_data_complete["reading_score"] >= 70)].count()["school_name"]
school_passing_reading

# Use the provided code to calculate the schools that passed both math and reading with scores of 70 or higher
passing_math_and_reading = school_data_complete[(school_data_complete["reading_score"] >= 70) & (school_data_complete["math_score"] >= 70)]
passing_math_and_reading

# Use the provided code to calculate the passing rates - math

per_school_passing_math = school_data_complete[school_data_complete["math_score"] >= 70].groupby(["school_name"])["math_score"].count()
per_school_passing_math_ = per_school_passing_math / per_school_counts *100
per_school_passing_math_.round(2)


# Use the provided code to calculate the passing rates - readin

per_school_passing_reading = school_data_complete[school_data_complete["reading_score"] >= 70].groupby(["school_name"])["reading_score"].count()
per_school_passing_reading_ = per_school_passing_reading / per_school_counts *100
per_school_passing_reading_.round(2)

#overall_passing_rate
overall_per_school_passing = (per_school_passing_math_ + per_school_passing_reading_) / 2
overall_per_school_passing.round(2)


# Create a DataFrame called `per_school_summary` with columns for the calculations above.
per_school_summary = pd.DataFrame({"School Type": school_types, "Total Students": per_school_counts, "Total School Budget": per_school_budget, "Per Student Budget": per_student_budget, 
                                   "Average Math Score": per_school_math, "Average Reading Score": school_passing_reading, "% Passing Math": per_school_passing_math_, "% Passing Reading": per_school_passing_reading_,
                                   "% Overall Passing": overall_per_school_passing})
# Formatting
per_school_summary["Total School Budget"] = per_school_summary["Total School Budget"].map("${:,.2f}".format)
per_school_summary["Per Student Budget"] = per_school_summary["Per Student Budget"].map("${:,.2f}".format)
per_school_summary["Average Math Score"] = per_school_summary["Average Math Score"].map("{:,.2f}".format)
per_school_summary["Average Reading Score"] = per_school_summary["Average Reading Score"].map("{:,.2f}".format)

per_school_summary["% Passing Math"] = per_school_summary["% Passing Math"].map("{:,.2f}%".format)
per_school_summary["% Passing Reading"] = per_school_summary["% Passing Reading"].map("{:,.2f}%".format)
per_school_summary["% Overall Passing"] = per_school_summary["% Overall Passing"].map("{:,.2f}%".format)

# Display the DataFrame
per_school_summary

# Sort the schools by `% Overall Passing` in descending order and display the top 5 rows.
top_five = per_school_summary.sort_values(["% Overall Passing"], ascending=False)
top_five.head()

# Sort the schools by `% Overall Passing` in ascending order and display the top 5 rows.
bottom_five = per_school_summary.sort_values(["% Overall Passing"], ascending=True)
bottom_five

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by "school_name" and take the mean of each.
ninth_graders_scores = ninth_graders.groupby("school_name").mean()
tenth_graders_scores = tenth_graders.groupby("school_name").mean()
eleventh_graders_scores = eleventh_graders.groupby("school_name").mean()
twelfth_graders_scores = twelfth_graders.groupby("school_name").mean()

# Use the code to select only the `math_score`.
ninth_grade_math_scores = ninth_graders_scores["math_score"]
tenth_grader_math_scores = tenth_graders_scores["math_score"]
eleventh_grader_math_scores = eleventh_graders_scores["math_score"]
twelfth_grader_math_scores = twelfth_graders_scores["math_score"]

# Combine each of the scores above into single DataFrame called `math_scores_by_grade`
math_scores_by_grade = pd.DataFrame({"Ninth Graders": ninth_grade_math_scores, "Tenth Graders": tenth_grader_math_scores, "Eleventh Graders": eleventh_grader_math_scores, "Twelfth Graders": twelfth_grader_math_scores})
math_scores_by_grade.round(2)

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by "school_name" and take the mean of each.
ninth_graders_scores = ninth_graders.groupby("school_name").mean()
tenth_graders_scores = tenth_graders.groupby("school_name").mean()
eleventh_graders_scores = eleventh_graders.groupby("school_name").mean()
twelfth_graders_scores = twelfth_graders.groupby("school_name").mean()

# Use the code to select only the `reading_score`.
ninth_grade_reading_scores = ninth_graders_scores["reading_score"]
tenth_grader_reading_scores = tenth_graders_scores["reading_score"]
eleventh_grader_reading_scores = eleventh_graders_scores["reading_score"]
twelfth_grader_reading_scores = twelfth_graders_scores["reading_score"]

# Combine each of the scores above into single DataFrame called `reading_scores_by_grade`
reading_scores_by_grade = pd.DataFrame({"Ninth Graders": ninth_grade_reading_scores, "Tenth Graders": tenth_grader_reading_scores, "Eleventh Graders": eleventh_grader_reading_scores, 
                                        "Twelfth Graders": twelfth_grader_reading_scores})
reading_scores_by_grade.round(2)


# Establish the bins 
spending_bins = [0, 585, 630, 645, 680]
bin_labels = ["<$585", "$585-630", "$630-645", "$645-680"]


# Use `pd.cut` to categorize spending based on the bins.

school_data_complete['spending_bins'] = pd.cut(school_data_complete['budget']/school_data_complete['size'], spending_bins, labels = bin_labels)

#group by spending
by_spending = school_data_complete.groupby('spending_bins')

avg_math = by_spending['math_score'].mean()
avg_read = by_spending['reading_score'].mean()
pass_math = school_data_complete[school_data_complete['math_score'] >= 70].groupby('spending_bins')['Student ID'].count()/by_spending['Student ID'].count()*100
pass_read = school_data_complete[school_data_complete['reading_score'] >= 70].groupby('spending_bins')['Student ID'].count()/by_spending['Student ID'].count()*100
overall = school_data_complete[(school_data_complete['reading_score'] >= 70) & (school_data_complete['math_score'] >= 70)].groupby('spending_bins')['Student ID'].count()/by_spending['Student ID'].count()*100

scores_by_spend = pd.DataFrame({"Average Math Score": avg_math,"Average Reading Score": avg_read, "% Passing Math": pass_math,
                                "% Passing Reading": pass_read,"% Overall Passing": overall})

scores_by_spend.index.name = "Per Student Budget"

scores_by_spend.round(2)


# Establish the bins.
bins = [0, 1000, 2000, 5000]
size_labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]

# Use `pd.cut` on the "Total Students" column of the `per_school_summary` DataFrame.

school_data_complete['size_bins'] = pd.cut(school_data_complete['size'], bins, labels = size_labels)

#group by spending
by_spend_size = school_data_complete.groupby('size_bins')

average_math_score = by_spend_size['math_score'].mean()
average_reading_score = by_spend_size['reading_score'].mean()
passing_math_percentage = school_data_complete[school_data_complete['math_score'] >= 70].groupby('size_bins')['Student ID'].count()/by_spend_size['Student ID'].count()*100
passing_reading_percentage = school_data_complete[school_data_complete['reading_score'] >= 70].groupby('size_bins')['Student ID'].count()/by_spend_size['Student ID'].count()*100
overall = school_data_complete[(school_data_complete['reading_score'] >= 70) & (school_data_complete['math_score'] >= 70)].groupby('size_bins')['Student ID'].count()/by_spend_size['Student ID'].count()*100

spend_by_size = pd.DataFrame({"Average Math Score": average_math_score, "Average Reading Score": average_reading_score, "% Passing Math": passing_math_percentage,
                                "% Passing Reading": passing_reading_percentage,"% Overall Passing": overall})
spend_by_size.index.name = "Total Students"

spend_by_size.round(2)     


#group by school type
spend_by_school_type = school_data_complete.groupby("type")

average_math_score_st = spend_by_school_type['math_score'].mean()
average_reading_score_st = spend_by_school_type['math_score'].mean()
pass_math_percent_st = school_data_complete[school_data_complete['math_score'] >= 70].groupby('type')['Student ID'].count()/spend_by_school_type['Student ID'].count()*100
pass_read_percent_st = school_data_complete[school_data_complete['reading_score'] >= 70].groupby('type')['Student ID'].count()/spend_by_school_type['Student ID'].count()*100
overall_st = school_data_complete[(school_data_complete['reading_score'] >= 70) & (school_data_complete['math_score'] >= 70)].groupby('type')['Student ID'].count()/spend_by_school_type['Student ID'].count()*100

spend_by_school_type = pd.DataFrame({"Average Math Score": average_math_score_st, "Average Reading Score": average_reading_score_st, "% Passing Math": pass_math_percent_st,
                                "% Passing Reading": pass_read_percent_st,"% Overall Passing": overall_st})
spend_by_school_type.index.name = "School Type"

spend_by_school_type.round(2)    


